// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  fname              String
  lname              String
  email              String               @unique
  emailVerified      DateTime?
  image              String?
  password           String
  username           String
  dob                DateTime?
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?
  verifiedAt         DateTime?
  accounts           Account[]
  sessions           Session[]
  expenses           Expense[]
  assets             Asset[]
  income             Income[]
  TransactionAccount TransactionAccount[]
}

model Expense {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  accountId          String
  account            TransactionAccount @relation(fields: [accountId], references: [id])
  expenseName        String
  expenseAmount      Float
  expenseDate        DateTime?
  expenseCategory    String
  expenseDescription String?
  tags               String[]
  createdAt          DateTime?          @default(now())
  updatedAt          DateTime?
  user               User?              @relation(fields: [userId], references: [id])
  userId             String?            @db.ObjectId
}

model TransactionAccount {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  user               User      @relation(fields: [userId], references: [id])
  accountName        String
  accountNumber      String
  accountType        String
  monoAccountId      String?
  accountDescription String?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime?
  Expense            Expense[]
  Income             Income[]
}

model Asset {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String?   @db.ObjectId
  user       User?     @relation(fields: [userId], references: [id])
  assetName  String
  assetType  String
  assetValue Float
  tags       String[]
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?
}

model Income {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  userId            String              @db.ObjectId
  user              User                @relation(fields: [userId], references: [id])
  accountId         String
  account           TransactionAccount? @relation(fields: [accountId], references: [id])
  incomeName        String
  incomeSource      String
  incomeAmount      Float
  incomeDate        DateTime?
  incomeDescription String?
  tags              String[]
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
